<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpTradeOffers</name>
    </assembly>
    <members>
        <member name="T:CSharpTradeOffers.Community.InviteResponse">
            <summary>
            InviteResponse
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Community.MemberList">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.GroupId64">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.GroupDetails">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.MemberCount">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.TotalPages">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.CurrentPage">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.StartingMember">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberList.Members">
            <remarks/>
        </member>
        <member name="T:CSharpTradeOffers.Community.MemberListGroupDetails">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.GroupName">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.GroupUrl">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.Headline">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.Summary">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.AvatarIcon">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.AvatarMedium">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.AvatarFull">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.MemberCount">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.MembersInChat">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.MembersInGame">
            <remarks/>
        </member>
        <member name="P:CSharpTradeOffers.Community.MemberListGroupDetails.MembersOnline">
            <remarks/>
        </member>
        <member name="T:CSharpTradeOffers.Community.MultiInviteResponse">
            <summary>
            MultiInviteResponse
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Community.CommunityHandler">
            <summary>
            Handles commmunity related tasks
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.PostComment(System.UInt64,System.String,System.Net.CookieContainer)">
            <summary>
            Posts a comment to the specified profile.
            </summary>
            <param name="steamId">The SteamId64 of the profile to post to.</param>
            <param name="comment">The comment text.</param>
            <param name="authContainer">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <returns>A CommentResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.PostClanComment(System.UInt64,System.String,System.Net.CookieContainer,System.Int32)">
            <summary>
            Posts a comment to the specified clan.
            </summary>
            <param name="clanId">SteamID64 of the clan to post the comment to.</param>
            <param name="comment">The comment to post.</param>
            <param name="authContainer">Authcontainer of the user to post from.</param>
            <param name="count">Almost certainly useless and never needs to be touched.
            I assume that it is the member count but it can be null, non-existant, or any number under the sun.</param>
            <returns>A ClanCommentResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.AddFriend(System.UInt64,System.Net.CookieContainer)">
            <summary>
            Sends a friend request to the specified user.
            </summary>
            <param name="steamId">SteamId64 of the user to add.</param>
            <param name="authContainer">Auth container of the user.</param>
            <returns>An AddFriendResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.AcceptFriendRequest(System.UInt64,System.Net.CookieContainer)">
            <summary>
            Accepts a friend request.
            </summary>
            <param name="steamId">SteamId64 of the person who sent the request.</param>
            <param name="authContainer">Auth container of the user.</param>
            <returns>Boolean representing the success of the function.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.RemoveFriend(System.UInt64,System.Net.CookieContainer)">
            <summary>
            Removes a friend.
            </summary>
            <param name="steamId">SteamId64 of the friend to remove.</param>
            <param name="authContainer">Auth container of the user.</param>
            <returns>Boolean representing the successs of the function.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.InviteUserToGroup(System.UInt64,System.Boolean,System.UInt64,System.Net.CookieContainer)">
            <summary>
            Invites the specified user to a group.
            </summary>
            <param name="steamId">The SteamId64 of the person to invite.</param>
            <param name="json">I forgot... oops.</param>
            <param name="group">The SteamId64 of the group to invite to.</param>
            <param name="authContainer">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <returns>An InviteResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.InviteUsersToGroup(System.UInt64[],System.Boolean,System.UInt64,System.Net.CookieContainer)">
            <summary>
            Invites the specified users to a group.
            </summary>
            <param name="steamIds">The SteamId64s of the users to invite.</param>
            <param name="json">I forgot... oops.</param>
            <param name="group">The SteamId64 of the group to invite the users to.</param>
            <param name="authContainer">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <returns>A MultiInviteResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.ToJArray(System.UInt64[])">
            <summary>
            Converts an array of SteamId64s to an array of the format ["0","1"]
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.RequestMemberList(System.UInt64)">
            <summary>
            Requests group information as well as the first page of users.
            </summary>
            <param name="groupId">The SteamId64 of the group to request information about.</param>
            <returns>A memberList object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.RequestMemberList(System.String)">
            <summary>
            Requests group information as well as the first page of users.
            </summary>
            <param name="groupName">The name of the group to request information about.</param>
            <returns>A memberList object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.RequestAllMemberLists(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Requests group information as well as all pages of users.
            </summary>
            <param name="groupId">The SteamId64 of the group to request information about.</param>
            <param name="retryWait">The number of miliseconds to wait between each retry.</param>
            <param name="retryCount">The number of times to retry before inserting a null MemberList object.</param>
            <returns>A List of the MemberList object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.RequestAllMemberLists(System.String,System.Int32,System.Int32)">
            <summary>
            Requests group information as well as the all pages of users.
            </summary>
            <param name="groupName">The name of the group to request information about.</param>
            <param name="retryWait">The number of miliseconds to wait between each retry.</param>
            <param name="retryCount">The number of times to retry before inserting a null MemberList object.</param>
            <returns>A List of the MemberList object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.SetProfile(CSharpTradeOffers.Community.Profile,CSharpTradeOffers.Account)">
            <summary>
            Sets the user's public profile settings to the exact settings specified in
            the Profile object.
            </summary>
            <param name="profile">The object to specify the new profile data.</param>
            <param name="account">The account of the profile to modify.</param>
            <returns>Bool depending on the success of the request.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.CommunityHandler.SetPrivacySettings(CSharpTradeOffers.Community.PrivacySettings,CSharpTradeOffers.Account)">
            <summary>
            Sets the privacy settings of the account.
            </summary>
            <param name="settings">Settings to set.</param>
            <param name="account">Account of settings to change.</param>
        </member>
        <member name="T:CSharpTradeOffers.Community.SteamUserHandler">
            <summary>
            Handles steam user related tasks.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Community.SteamUserHandler.GetFriendList(System.UInt64,System.String)">
            <summary>
            Retrieves the friends list of the specified steamid64. 
            The profile must be set to public or the owner of the api key must be friends with them.
            The profile cannot be private or the method will fail and it will return null.
            </summary>
            <param name="steamId">SteamId64 to retrieve the friends list from.</param>
            <param name="relationship">All/Friend, there are others but I do not know what.</param>
            <returns>Null upon failure, otherwise a list of Friend objects.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.SteamUserHandler.GetPlayerBans(System.Collections.Generic.List{System.UInt64})">
            <summary>
            Gets the bans of the specified SteamId64s
            </summary>
            <param name="playersBansToRequest">A List of steamid64s to retrieve ban information about.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.SteamUserHandler.GetPlayerSummariesV2(System.Collections.Generic.List{System.UInt64})">
            <summary>
            Requests a list of player summaries of the players in the list.
            </summary>
            <param name="playerSummariesToRequest">A list of SteamIds to request their summaries.</param>
            <returns>A list of PlayerSummary objects.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.SteamUserHandler.GetUserGroupList(System.UInt64)">
            <summary>
            Requests the GroupIds of the groups of the specified player.
            </summary>
            <param name="steamId">SteamId64 of the player.</param>
            <returns>A GetUserGroupListResult object that contains a list of group ids.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Community.SteamUserHandler.ResolveVanityUrl(System.String,System.Int32)">
            <summary>
            Resolves a vanity url into a SteamId64.
            </summary>
            <param name="vanityUrl">The vanity url part of the url (not whole url). ex: fatherfoxxy NOT https://steamcommunity.com/id/FatherFoxxy </param>
            <param name="urlType">
            1 - (default) Individual profile
            2 - Group Profile
            3 - Offical Game Group Profile
            </param>
            <returns>A ResolveVanityUrlResult object.</returns>
        </member>
        <member name="T:CSharpTradeOffers.Configuration.CommandPermission">
            <summary>
            Generic command permission class.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.CommandPermission.CommandName">
            <summary>
            The exact name of the command.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.CommandPermission.PermissionLevel">
            <summary>
            An integer representing a permission level.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.CommandPermission.ToKeyValuePair">
            <summary>
            Turns the Command_Permission into a KeyValuePair
            </summary>
            <returns>KeyValuePair</returns>
        </member>
        <member name="T:CSharpTradeOffers.Configuration.Dictionaries">
            <summary>
            Class containing Dictionary versions of Offer/CommandPermission
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Dictionaries.OfficersDict">
            <summary>
            
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Dictionaries.CommandPermissionsDict">
            <summary>
            
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Dictionaries.ClearOfficer">
            <summary>
            Clear officers dictionary. This should not be called directly.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Dictionaries.ClearPerms">
            <summary>
            Clear permissions dictionary. This shold not be called directly.
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Configuration.Officer">
            <summary>
            Generic officer class.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Officer.SteamId">
            <summary>
            The UInt64 version of a SteamID
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Officer.PermissionLevel">
            <summary>
            The permission level the SteamID has.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Officer.ToKeyValuePair">
            <summary>
            Turns the Officer into a KeyValuePair
            </summary>
            <returns>KeyValuePair of steamid,permissionlevel</returns>
        </member>
        <member name="T:CSharpTradeOffers.Configuration.RootConfig">
            <summary>
            A generic RootConfig object containing configuration information.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Username">
            <summary>
            Username to automatically log in to.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Password">
            <summary>
            Password to use to automatically log in.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.SteamMachineAuth">
            <summary>
            Special bytes sent to Steam to prove the user is the account holder.
            </summary>"
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.ApiKey">
            <summary>
            A special key retrieved from https://steamcommunity.com/dev/apikey
            The key MUST be from the bot's account.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.GreetMessage">
            <summary>
            Will be said upon a successful friend add.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.AddOfficers">
            <summary>
            Determines whether or not the bot should attempt to friend all Officers.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Verbose">
            <summary>
            Changes whether or not the Debug.Log should output verbose information.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.LogChat">
            <summary>
            Log all chat into .txt files with the date and time. A new file is generated every five minutes.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Log">
            <summary>
            I can't remember.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Officers">
            <summary>
            List of Officer objects.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.CommandPermissions">
            <summary>
            List of Command_Permission objects.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.Inventories">
            <summary>
            Inventories to create on load, refreshInventories method from Inventory handler also uses these.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.RootConfig.BannedUsers">
            <summary>
            Define users that are not allowed to use this bot.
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Configuration.Config">
            <summary>
            Generic config file
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Config.Cfg">
            <summary>
            The meat of the config
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Config.ConfigDictionaries">
            <summary>
            Dictionary forms of the lists contained in for easy access/use
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Configuration.Config.MarketEligibilityJson">
            <summary>
            I forgot why I put this here but it's probably important.
            I forgot or it's obvious. TODO: Add better documentation
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Config.#ctor(System.String)">
            <summary>
            the Config and the path to use
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Config.Reload">
            <summary>
            Reloads the configuration file (path). If file is not present, it will generate a new one.
            </summary>
            <returns>A RootConfig object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Configuration.Config.WriteChanges(CSharpTradeOffers.Configuration.RootConfig)">
            <summary>
            Writes the changes made to the config.
            </summary>
            <param name="towrite"></param>
        </member>
        <member name="M:CSharpTradeOffers.Trading.CEconAsset.GetMarketHashName(System.String)">
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpTradeOffers.Trading.EconServiceHandler">
            <summary>
            Handles EconService related tasks such as trade offers.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.GetTradeOffers(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Requests all trade offers.
            </summary>
            <param name="data">A dictionary containing the URL params found here: https://developer.valvesoftware.com/wiki/Steam_Web_API/IEconService at GetTradeOffers (v1).
            ex: [leftarrow]"get_sent_offers","1"[rightarrow]. Please note, [leftarrow] and [rightarrow] correspond to the keys on the keyboard.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.GetTradeOffer(System.UInt64,System.String)">
            <summary>
            Requests a single trade offer based on the tradeofferid.
            </summary>
            <param name="tradeofferid">The tradeofferid to request information on.</param>
            <param name="language">The language to use. Default: english</param>
            <returns>A CEConTradeOffer object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.DeclineTradeOffer(System.UInt64)">
            <summary>
            Declines a trade offer that was sent to you.
            </summary>
            <param name="tradeofferid">The ID of the offer to decline.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.CancelTradeOffer(System.UInt64)">
            <summary>
            Cancels a trade offer based on the specified tradeofferid.
            </summary>
            <param name="tradeofferid">The ID of the offer to cancel.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.AcceptTradeOffer(CSharpTradeOffers.Trading.Trade,System.Net.CookieContainer,System.UInt32,System.String)">
            <summary>
            Accepts a specified trade offer.
            </summary>
            <param name="tradeId">A TradeId object containing the id of the trade to accept.</param>
            <param name="container">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <param name="partnerId">The AccountId of the person to trade with.</param>
            <param name="serverid">Almost always 1, not quite sure what other numbers do.</param>
            <returns>The TradeId of the offer that was accepted.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.AcceptTradeOffer(System.UInt64,System.Net.CookieContainer,System.UInt32,System.String)">
            <summary>
            Accepts a specified trade offer.
            </summary>
            <param name="tradeId">A ulong representing the trade to accept.</param>
            <param name="container">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <param name="partnerId">The AccountId of the person to trade with.</param>
            <param name="serverid">Almost always 1, not quite sure what other numbers do.</param>
            <returns>The TradeId of the offer that was accepted.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.SendTradeOffer(System.UInt64,System.Net.CookieContainer,System.String,System.String,CSharpTradeOffers.Trading.TradeOffer)">
            <summary>
            Sends a trade offer to the specified recipient. 
            </summary>
            <param name="partnerSid">The SteamId64 (ulong) of the person to send the offer to.</param>
            <param name="container">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <param name="tradeoffermessage">An optional message to be sent with the offer. Can be null.</param>
            <param name="serverid">Almost always 1, not quite sure what other numbers do.</param>
            <param name="offer">A TradeOffer object containing the trade parameters.</param>
            <returns>A SendOfferResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.ModifyTradeOffer(System.UInt64,System.Net.CookieContainer,System.String,System.String,System.UInt32,CSharpTradeOffers.Trading.TradeOffer)">
            <summary>
            Modifies an existing trade offer.
            </summary>
            <param name="partnerSid">The SteamId64 (ulong) of the person whose offer will be modified.</param>
            <param name="container">Auth Cookies MUST be passed here, the function will fail if not.</param>
            <param name="tradeoffermessage">An otpional message to be sent with the trade offer. Can be null.</param>
            <param name="serverid">Almost always 1, not quite sure what other numbers do.</param>
            <param name="tradeofferidCountered">The TradeId of the offer to counter or modify.</param>
            <param name="offer">A TradeOffer object containing the trade parameters. </param>
            <returns>A SendOfferResponse object.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.EconServiceHandler.GetTradeOffersSummary(System.UInt32)">
            <summary>
            Requestss TradeOffer statistics. ie: historical_received_count
            </summary>
            <param name="timeLastVisit">Unix time for historical cutoff.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.#ctor(System.UInt64,System.UInt32)">
            <summary>
            Class constructor, automatically initializes inventory.
            </summary>
            <param name="steamId">steamId64 of the inventory.</param>
            <param name="appId">App ID of the inventory.</param>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Inventory.Items">
            <summary>
            String is the ClassId linking to an Item object.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.RequestInventory(System.UInt32)">
            <summary>
            Requests the inventory for the specified steamId and appId.
            </summary>
            <param name="steamId">steamId64 of the inventory to request.</param>
            <param name="appId">App ID of the inventory to request.</param>
            <returns>Returns a dynamic JSON object of the inventory to request.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.InitializeInventory(System.UInt32)">
            <summary>
            Initializes the inventory for the specified steamId and appId.
            </summary>
            <param name="steamId">steamId64 of the inventory to request.</param>
            <param name="appId">App ID of the inventory to request.</param>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.ItemWorth(CSharpTradeOffers.Trading.Item)">
            <summary>
            Requests decimal worth of an Item.
            </summary>
            <param name="item">An Item object to get the value of.</param>
            <returns>A decimal worth in USD.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.ItemWorth(System.Boolean,System.UInt32,System.String)">
            <param name="tradable"></param>
            <param name="appid"></param>
            <param name="marketHashName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.ItemWorth(System.Int32,System.UInt32,System.String)">
            <param name="tradable"></param>
            <param name="appid"></param>
            <param name="marketHashName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.FindAvailableAsset(System.String)">
            <summary>
            Finds the first rgInventoryItem that is not in use.
            </summary>
            <param name="classid">ClassId of items to search.</param>
            <returns>An rgInventoryItem that is not marked in use.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.Inventory.MarkAsset(CSharpTradeOffers.Trading.CEconAsset,System.Boolean)">
            <summary>
            Locates asset in Items[classid].items and marks it's inUse bool according to the inUse argument.
            </summary>
            <param name="asset">Asset to mark</param>
            <param name="inUse">Value to set</param>
            <returns>True if successful, false if not.</returns>
        </member>
        <member name="T:CSharpTradeOffers.Trading.InventoryHandler">
            <summary>
            Handles Inventory-Related tasks for a specific account.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.FindUnusedItem(CSharpTradeOffers.Trading.ItemValueHandler.ValuedWorth)">
            <summary>
            Locates an Item in the inventory.
            </summary>
            <param name="assetToFind">Specifies search params.</param>
            <returns>An item matching the params</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.FindUnusedItems(System.String,System.UInt32)">
            <param name="marketHashName">Name to search</param>
            <param name="appid">Appid of the inventory to search</param>
            <returns>A list of items whose market_hash_name contains marketHashName</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.FindUnusedItem(CSharpTradeOffers.Trading.CEconAsset,CSharpTradeOffers.Trading.Inventory)">
            <summary>
            Locates an Item in the inventory.
            </summary>
            <param name="assetToFind">Specifies search params.</param>
            <param name="inv">Inventory to search.providing the </param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.FindFirstItem(CSharpTradeOffers.Trading.CEconAsset)">
            <summary>
            Locates an Item in the inventory.
            </summary>
            <param name="assetToFind">Specifies search params.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.MarkMyAssets(CSharpTradeOffers.Trading.CEconTradeOffer,System.Boolean)">
            <summary>
            Marks the inUse bool of the assets specified in the trade offer.
            </summary>
            <param name="offer">TradeOffer to mark.</param>
            <param name="inUse">Bool to set.</param>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.MarkMyAssets(CSharpTradeOffers.Trading.TradeOffer,System.Boolean)">
            <summary>
            Marks the inUse bool of the assets specified in the trade offer.
            </summary>
            <param name="offer">TradeOffer to mark.</param>
            <param name="inUse">Bool to set.</param>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.ItemWorth(CSharpTradeOffers.Trading.Item)">
            <summary>
            Requests decimal worth of an Item.
            </summary>
            <param name="item">An Item object to get the value of.</param>
            <returns>A decimal worth in USD.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.ItemWorth(System.Boolean,System.UInt32,System.String)">
            <param name="marketable"></param>
            <param name="appid"></param>
            <param name="marketHashName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.InventoryHandler.ItemWorth(System.Int32,System.UInt32,System.String)">
            <param name="marketable"></param>
            <param name="appid"></param>
            <param name="marketHashName"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpTradeOffers.Trading.Item">
            <summary>
            An inventory item type class.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.AppId">
            <summary>
            AppId of item
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.ClassId">
            <summary>
            ClassId of item
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.MarketHashName">
            <summary>
            Market hash name of item, used for searching price as well as general matching.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.Tradable">
            <summary>
            0 = not tradable, 1 = tradable.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.Marketable">
            <summary>
            0 = not marketable, 1 = marketable
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.Commodity">
            <summary>
            0 = not commodity, 1 = commodity
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.Items">
            <summary>
            List of rgInventoryItem, this should be used for whenever you need to interact with a specific item rather than all of them.
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Trading.Item.Worth">
            <summary>
            Market worth of the item.
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Trading.RgDescription">
            <summary>
            Description object contained in the dynamic JSON returned by RequestInventory.
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Trading.RgInventoryItem">
            <summary>
            An item within an inventory list.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Trading.RgInventoryItem.ToCEconAsset(System.String)">
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpTradeOffers.Trading.SteamEconomyHandler">
            <summary>
            Handles Steam Economy related tasks, like retrieving class info
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Trading.SteamEconomyHandler.GetAssetClassInfo(System.UInt32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the asset class info of an item, must provide ClassID/InstanceID in IDs
            </summary>
            <param name="apiKey">Your Steam API key</param>
            <param name="appid">Uint32 number that represents the game to retrieve item data from.</param>
            <param name="Ids">Dictionary MUST contain ClassID/InstanceID of item.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpTradeOffers.Trading.SteamEconomyHandler.GetAssetPrices(System.UInt32,System.String,System.String)">
            <summary>
            I think this retrieves coupons or something. Although it may do what it says.
            </summary>
            <param name="appId">AppId to find asset prices for.</param>
            <param name="currency">Three letter string representing a currency to filter for, if left blank all currencies are returned. EX: USD or EUR, etc.</param>
            <param name="language">The language to retrieve the results in.</param>
            <returns>A GetAssetPricesResponse object.</returns>
        </member>
        <member name="T:CSharpTradeOffers.Trading.ItemValueHandler">
            <summary>
            DO. NOT. USE. Under heavy construction.
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Trading.ItemValueHandler.TypeIds">
            <summary>
            TypeIds for use in trade config, mostly for reference and not actually used anywhere
            </summary>
        </member>
        <member name="T:CSharpTradeOffers.Account">
            <summary>
            Generic account
            </summary>
        </member>
        <member name="P:CSharpTradeOffers.Account.SteamId">
            <summary>
            The bot's Sid64.
            </summary>
        </member>
        <member name="F:CSharpTradeOffers.Account.AuthContainer">
            <summary>
            The Auth Cookies for the bot.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Account.AddMachineAuthCookies(System.String)">
            <summary>
            Adds the steamMachineAuth cookie to the AuthContainer.
            This can also be used for any string separated by [name]=[value]
            </summary>
            <param name="authstring">String to turn into a cookie and add.</param>
        </member>
        <member name="T:CSharpTradeOffers.ExtensionMethods">
            <summary>
            Various extension methods used in the library.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.ExtensionMethods.IntValue(System.Boolean)">
            <summary>
            Converts the bool variable to its integer representation of 0 for false and 1 for true.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpTradeOffers.MarketHandler">
            <summary>
            Handles market related tasks.
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.MarketHandler.EligibilityCheck(System.UInt64,System.Net.CookieContainer)">
            <summary>
            Sets the container to contain a MarketEligibility cookie. Required before trading.
            </summary>
            <param name="steamId">The SteamId of the bot.</param>
            <param name="container">The bot CookieContainer</param>
        </member>
        <member name="M:CSharpTradeOffers.MarketHandler.GetPriceOverview(System.UInt32,System.String,System.String,System.String)">
            <summary>
            Gets the price overview of an item.
            </summary>
            <param name="appId">The appId of the item.</param>
            <param name="marketHashName">The market_hash_name of the item</param>
            <param name="country">Country to check in. (ISO)</param>
            <param name="currency">Currency code, I forget what. 1 = US $</param>
            <returns>A MarketValue object containing the data.</returns>
        </member>
        <member name="T:CSharpTradeOffers.SteamIdOperations">
            <summary>
            Helps with conversion operations
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.SteamIdOperations.ConvertAccountIdToUlong(System.UInt32)">
            <summary>
            Converts an AccountId to a SteamId64.
            </summary>
            <param name="accountId">AccountId to convert.</param>
            <returns>SteamId64 derived from AccountId</returns>
        </member>
        <member name="M:CSharpTradeOffers.SteamIdOperations.ConvertAccountIdToSteamId(System.UInt32)">
            <summary>
            Covnerts an AccountId to a SteamId
            </summary>
            <param name="accountId">AccountId to convert to a SteamId</param>
            <returns>A string in the format of STEAM_0:0:0000000</returns>
        </member>
        <member name="M:CSharpTradeOffers.SteamIdOperations.ConvertSteamIdToUlong(System.String)">
            <summary>
            Converts a SteamId to a SteamId64
            </summary>
            <param name="steamId">SteamId to convert to a SteamId64</param>
            <returns>A SteamId64.</returns>
        </member>
        <member name="M:CSharpTradeOffers.SteamIdOperations.ConvertUlongToSteamId(System.UInt64)">
            <summary>
            Converts a SteamId64 into a SteamId.
            </summary>
            <param name="steamId">SteamId64 to convert.</param>
            <returns>A string in the format of STEAM_0:0:0000000</returns>
        </member>
        <member name="M:CSharpTradeOffers.SteamIdOperations.ConvertSteamIdToAccountId(System.String)">
            <summary>
            Converts a SteamId into an AccountId
            </summary>
            <param name="steamId">SteamId to convert.</param>
            <returns>An AccountId</returns>
        </member>
        <member name="T:CSharpTradeOffers.Web">
            <summary>
            Handles Web related tasks like logging in and fetching
            </summary>
        </member>
        <member name="M:CSharpTradeOffers.Web.Request(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Boolean,System.String)">
            <summary>
            Fetch calls this method.
            </summary>
            <param name="url">The URL to request.</param>
            <param name="method">The method to be used. Ex: POST</param>
            <param name="data">Dictionary> containing the paramters to be sent in the URL or in the Stream, depending on the method.</param>
            <param name="cookies">A cookiecontainer with cookies to send.</param>
            <param name="xHeaders">Special parameter, should only be used with requests that need "X-Requested-With: XMLHttpRequest" and "X-Prototype-Version: 1.7"</param>
            <param name="referer">Sets the referrer for the request.</param>
            <returns>An HttpWebResponse object from the requested URL.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.Fetch(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Boolean,System.String)">
            <summary>
            A web method to return the response string from the URL.
            </summary>
            <param name="url">The URL to request.</param>
            <param name="method">The method to be used. Ex: POST</param>
            <param name="data">Dictionary containing the paramters to be sent in the URL or in the Stream, depending on the method.</param>
            <param name="cookies">A cookiecontainer with cookies to send.</param>
            <param name="xHeaders">Special parameter, should only be used with requests that need "X-Requested-With: XMLHttpRequest" and "X-Prototype-Version: 1.7"</param>
            <param name="referer">Sets the referrer for the request.</param>
            <returns>A string from the response stream.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.RetryFetch(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Boolean,System.String)">
            <summary>
            A web method to return the response string from the URL.
            </summary>
            <param name="url">The URL to request.</param>
            <param name="method">The method to be used. Ex: POST</param>
            <param name="data">Dictionary containing the paramters to be sent in the URL or in the Stream, depending on the method.</param>
            <param name="cookies">A cookiecontainer with cookies to send.</param>
            <param name="xHeaders">Special parameter, should only be used with requests that need "X-Requested-With: XMLHttpRequest" and "X-Prototype-Version: 1.7"</param>
            <param name="referer">Sets the referrer for the request.</param>
            <returns>A string from the response stream.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.RetryFetchStream(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Boolean,System.String)">
            <summary>
            A web method to return the response string from the URL.
            </summary>
            <param name="url">The URL to request.</param>
            <param name="method">The method to be used. Ex: POST</param>
            <param name="data">Dictionary containing the paramters to be sent in the URL or in the Stream, depending on the method.</param>
            <param name="cookies">A cookiecontainer with cookies to send.</param>
            <param name="xHeaders">Special parameter, should only be used with requests that need "X-Requested-With: XMLHttpRequest" and "X-Prototype-Version: 1.7"</param>
            <param name="referer">Sets the referrer for the request.</param>
            <returns>A string from the response stream.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.FetchStream(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Boolean,System.String)">
            <summary>
            A web method to return the response string from the URL.
            </summary>
            <param name="url">The URL to request.</param>
            <param name="method">The method to be used. Ex: POST</param>
            <param name="data">Dictionary containing the paramters to be sent in the URL or in the Stream, depending on the method.</param>
            <param name="cookies">A cookiecontainer with cookies to send.</param>
            <param name="xHeaders">Special parameter, should only be used with requests that need "X-Requested-With: XMLHttpRequest" and "X-Prototype-Version: 1.7"</param>
            <param name="referer">Sets the referrer for the request.</param>
            <returns>The response stream.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.DictionaryToUrlString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to URL parameters. Ex: ?param=arg
            </summary>
            <param name="dict">The Dictionary to be converted.</param>
            <returns>A concatenated string of URL arguments.</returns>
        </member>
        <member name="M:CSharpTradeOffers.Web.DoLogin(System.String,System.String,System.String)">
            <summary>
            Executes the login by using the Steam Website.
            </summary> 
            <returns>Return an Account</returns>
        </member>
    </members>
</doc>
